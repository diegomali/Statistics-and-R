popsd(controlMales)
mean(sample(controlMales, 25))
set.seed(1)
mean(sample(dat, 25))
population <- unlist(dat)
mean(sample(population, 25))
set.seed(1)
mean(sample(population, 25))
set.seed(1)
mean(sample(population, 25))
population <- filter(Diet=="chow")  %>% select(Bodyweight) %>% unlist(dat)
set.seed(1)
mean(sample(population, 25))
set.seed(1)
mean(sample(controlMales, 25))
set.seed(1)
mean(sample(controlMales, 25))
set.seed(1)
mean(sample(controlMales, 25))
controlMalesHF <- filter(dat, Sex=="M") %>% filter(Diet=="hf")  %>% select(Bodyweight) %>% unlist
mean(controlMalesHF)
popsd(controlMalesHF)
set.seed(1)
mean(sample(controlMalesHF, 25))
set.seed(1)
mean(sample(controlMalesHF, 25))
set.seed(1)
YOb <-  mean(sample(controlMalesHF, 25))
set.seed(1)
XOb <-  mean(sample(controlMales, 25))
x <-mean(controlMales)
y <- mean(controlMalesHF)
(y - x) - (YOb - XOb)
x <- mean(filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist)
y <- mean(filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist)
controlFemales <- mean(filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist)
controlFemalesHF <- mean(filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist)
set.seed(1)
XOb <-  mean(sample(controlFemales, 25))
set.seed(1)
YOb <-  mean(sample(controlFemalesHF, 25))
(y - x) - (YOb - XOb)
set.seed(1)
XOb <-  mean(sample(controlFemales, 25))
set.seed(1)
YOb <-  mean(sample(controlFemalesHF, 25))
(y - x) - (YOb - XOb)
abs((y - x) - (YOb - XOb))
controlFemales <- mean(filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist)
controlFemalesHF <- mean(filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist)
set.seed(1)
XOb <-  mean(sample(controlFemales, 25))
set.seed(1)
YOb <-  mean(sample(controlFemalesHF, 25))
abs((y - x) - (YOb - XOb))
controlFemales <- mean(filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist)
controlFemalesHF <- mean(filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist)
set.seed(1)
XOb <-  mean(sample(controlFemales, 25))
set.seed(1)
YOb <-  mean(sample(controlFemalesHF, 25))
x <- mean(controlFemales)
y <- mean(controlFemalesHF)
set.seed(1)
XOb <-  mean(sample(controlFemales, 25))
set.seed(1)
YOb <-  mean(sample(controlFemalesHF, 25))
abs((y - x) - (YOb - XOb))
controlFemales <- mean(filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist)
controlFemalesHF <- mean(filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist)
x <- mean(controlFemales)
y <- mean(controlFemalesHF)
set.seed(1)
XOb <-  mean(sample(controlFemales, 25))
set.seed(1)
YOb <-  mean(sample(controlFemalesHF, 25))
abs((y - x) - (YOb - XOb))
controlFemales <- mean(filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist)
controlFemalesHF <- mean(filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist)
x <- mean(controlFemales)
y <- mean(controlFemalesHF)
set.seed(1)
XOb <-  mean(sample(controlFemales, 25))
set.seed(1)
YOb <-  mean(sample(controlFemalesHF, 25))
abs((y - x) - (YOb - XOb))
controlFemales <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
controlFemales <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
controlFemalesHF <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
x <- mean(controlFemales)
y <- mean(controlFemalesHF)
set.seed(1)
XOb <-  mean(sample(controlFemales, 25))
set.seed(1)
YOb <-  mean(sample(controlFemalesHF, 25))
abs((y - x) - (YOb - XOb))
set.seed(1)
sum(sample(controlFemales, 25))
set.seed(1)
#579.23 * (1/25)
579.23 * (1/25)
set.seed(1)
sum(sample(controlFemales, 25)) / 25
set.seed(1)
XOb <-  mean(sample(controlFemales, 25))
XOb
library(downloader)
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat <- na.omit( read.csv(filename) )
dat <- na.omit( read.csv(filename) )
?pnorm
dat
library(dplyr)
population <- select(Bodyweight) %>% unlist
population <- select(dat, Bodyweight) %>% unlist
obs <- mean(population)
obs
library(rafalib)
obs <- mean(population)
popsd(population)
obs <- mean(population)
pnorm(obs,mean(null),sd(null))
popsd(population)
sdP <-  popsd(population)
mean( (obs - sdP) > 1)
obs <- mean(population)
sdP <-  popsd(population)
mean( (obs - sdP) > 1)
obs <- mean(population)
set.seed(1)
n <- 1000
avgs <- vector("numeric",n)
avgs <- vector("numeric",n)
for(i in 1:n){
avgPopulations <- sample(dat,5)
avgs[i] <- mean(avgPopulations)
}
obs <- mean(population)
set.seed(1)
n <- 1000
avgs <- vector("numeric",n)
obs <- mean(population)
set.seed(1)
n <- 1000
avgs <- vector("numeric",n)
for(i in 1:n){
avgPopulations <- sample(population,5)
avgs[i] <- mean(avgPopulations)
}
?pnorm
pnorm(avgs, obs, 1)
?sd
sd(population)
?pnorm(avgs, obs, 1)
pnorm(population, mean(avgs), (sd(population) + 1))
pnorm(obs, mean(avgs), (sd(population) + 1))
obsDiff <- mean(avgs) - obs
obsDiff
pnorm(obsDiff, mean(avgs), (sd(population) + 1))
obsDiff <- abs(mean(avgs) - obs)
pnorm(obsDiff, mean(avgs), (sd(population) + 1))
controlFemales <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
controlFemalesHF <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
x <- mean(controlFemales)
y <- mean(controlFemalesHF)
set.seed(1)
XOb <-  mean(sample(controlFemales, 25))
set.seed(1)
YOb <-  mean(sample(controlFemalesHF, 25))
abs((y - x) - (YOb - XOb))
pnorm(1)-pnorm(-1)
pnorm(2)-pnorm(-2)
?pnorm
pnorm(3)-pnorm(-3)
pnorm(3)-pnorm(-3)
library(rafalib)
sdPopulation <- popsd(dat)
sdPopulation <- popsd(dat)
sdPopulation <- popsd(dat)
y <- filter(dat, Sex=="M") %>% filter(Diet=="hf")  %>% select(Bodyweight) %>% unlist
sdPopulation <- popsd(y)
y
sdPopulation
y <- filter(dat, Sex=="M") %>% filter(Diet=="chow")  %>% select(Bodyweight) %>% unlist
sdPopulation <- popsd(y)
sdPopulation
x <- filter(dat, Sex=="M") %>% filter(Diet=="hf")  %>% select(Bodyweight) %>% unlist
pnorm( (y / sdPopulation)  - pnorm( (x / sdPopulation))
pnorm( (y / sdPopulation))  - pnorm( (x / sdPopulation))
pnorm( (y / sdPopulation))  - pnorm( (x / sdPopulation))
pnorm( (y / sdPopulation))  - pnorm( (x / sdPopulation))
pnorm( (y / sdPopulation))  - pnorm( (x / sdPopulation))
pnorm( ( mean(y) / sdPopulation))  - pnorm( (mean(x) / sdPopulation))
pnorm( 1/ sdPopulation)  - pnorm(-1/ sdPopulation)
pnorm(1, y, sdPopulation)  - pnorm(-1, y, sdPopulation)
pnorm(1, mean(y), sdPopulation)  - pnorm(-1, mean(y), sdPopulation)
pnorm(1, NULL, sdPopulation)  - pnorm(-1, NULL, sdPopulation)
y <- filter(dat, Sex=="M") %>% filter(Diet=="chow")  %>% select(Bodyweight) %>% unlist
pnorm(1, NULL, sdPopulation)  - pnorm(-1, NULL, sdPopulation)
z <- (y - mean(y)) / popsd(y)
mean(abs(z)<=1)
z
z
mean(abs(z)<=2)
mean(abs(z)<=3)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(1,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
mean(avgs)
popsd(avgs)
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleMiceWeights.csv"
filename <- "femaleMiceWeights.csv"
if(!file.exists("femaleMiceWeights.csv")) download(url,destfile=filename)
dat <- read.csv(filename)
dat <- read.csv(filename)
n <- 100
x=sample(1:6, n, replace=TRUE)
x
r6 <- mean(x==6)
p=1/6
p*(1-p)/n
n <- 10000
x=sample(1:6, n, replace=TRUE)
r6 <- mean(x==6)
p=1/6
p*(1-p)/n
z = (mean(x==6) - p) / sqrt(p*(1-p)/n)
z
z = abs((mean(x==6) - p) / sqrt(p*(1-p)/n))
z
n <- 100
x=sample(1:6, n, replace=TRUE)
r6 <- mean(x==6)
p=1/6
z = (mean(x==6) - p) / sqrt(p*(1-p)/n)
z
?replicate
set.seed(1)
n <- 100
x=sample(1:6, n, replace=TRUE)
r6 <- mean(x==6)
p=1/6
z = (mean(x==6) - p) / sqrt(p*(1-p)/n)
n <- 100
x=sample(1:6, n, replace=TRUE)
r6 <- mean(x==6)
p=1/6
z = (mean(x==6) - p) / sqrt(p*(1-p)/n)
r6
set.seed(1)
n <- 100
x=sample(1:6, n, replace=TRUE)
set.seed(1)
n <- 100
p=1/6
zs <- replicate(10000, {
x=sample(1:6, n, replace=TRUE)
p=1/6
(mean(x==6) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
set.seed(1)
n <- 100
numberOfSides <- 6
p=1/numberOfSides
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqplot(zs)
qqnorm(zs)
qqnorm(zs)
set.seed(1)
n <- 5
numberOfSides <- 6
p= 0.5
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(zs)
qqnorm(abs(zs))
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.5
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(abs(zs))
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.01
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(abs(zs))
set.seed(1)
n <- 100
numberOfSides <- 6
p= 0.01
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(abs(zs))
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.01
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(abs(zs))
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.5
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(abs(zs))
library(devtools)
install_github("ririzarr/rafalib")
library(rafalib)
mypar()
mypar()
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.5
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(abs(zs))
qqnorm(zs)
qqplot(zs)
qqnorm(zs)
abline(0,1)
qqnorm(abs(zs))
abline(0,1)
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.5
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(abs(zs))
abline(0,1)
set.seed(1)
n <- 5
numberOfSides <- 6
p= 0.5
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(abs(zs))
abline(0,1)
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.5
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(abs(zs))
abline(0,1)
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.01
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(abs(zs))
abline(0,1)
qqnorm(zs)
abline(0,1)
set.seed(1)
n <- 5
numberOfSides <- 6
p= 0.5
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(zs)
abline(0,1)
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.5
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.5
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
qqnorm(zs)
abline(0,1)
p= 0.01
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.01
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(zs)
abline(0,1)
set.seed(1)
n <- 30
numberOfSides <- 6
p= 0.5
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
mean( abs(zs) > 2)
qqnorm(zs)
abline(0,1)
ps <- c(0.5,0.5,0.01,0.01)
ns <- c(5,30,30,100)
library(rafalib)
mypar(4,2)
for(i in 1:4){
p <- ps[i]
sides <- 1/p
n <- ns[i]
zs <- replicate(10000,{
x <- sample(1:sides,n,replace=TRUE)
(mean(x==1) - p) / sqrt(p*(1-p)/n)
})
hist(zs,nclass=7)
qqnorm(zs)
abline(0,1)
}
n <- 30
numberOfSides <- 6
p= 0.5
zs <- replicate(10000, {
x=sample(1:numberOfSides, n, replace=TRUE)
(mean(x==numberOfSides) - p) / sqrt(p*(1-p)/n)
})
qqnorm(zs)
abline(0,1)
mypar()
qqnorm(zs)
abline(0,1)
mypar(4, 2)
qqnorm(zs)
abline(0,1)
ps <- c(0.5,0.5,0.01,0.01)
ns <- c(5,30,30,100)
library(rafalib)
mypar(4,2)
for(i in 1:4){
p <- ps[i]
sides <- 1/p
n <- ns[i]
zs <- replicate(10000,{
x <- sample(1:sides,n,replace=TRUE)
(mean(x==1) - p) / sqrt(p*(1-p)/n)
})
hist(zs,nclass=7)
qqnorm(zs)
abline(0,1)
}
X <- filter(dat, Diet=="chow") %>% select(Bodyweight) %>% unlist
Y <- filter(dat, Diet=="hf") %>% select(Bodyweight) %>% unlist
library(dplyr)
X <- filter(dat, Diet=="chow") %>% select(Bodyweight) %>% unlist
Y <- filter(dat, Diet=="hf") %>% select(Bodyweight) %>% unlist
?str
mean(X)
X
length(X)
